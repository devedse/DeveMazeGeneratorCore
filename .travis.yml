language: generic

addons:
  apt:
    packages:
    - gettext
    - libcurl4-openssl-dev
    - libicu-dev
    - libssl-dev
    - libunwind8
    - zlib1g

matrix:
  include:
    - os: linux
      dist: trusty # Ubuntu 14.04
      sudo: required
      env: CONFIGURATION=Release
      services:
        - docker
    - os: linux
      dist: trusty
      sudo: required
      env: CONFIGURATION=Debug
    - os: osx
      osx_image: xcode8.2 # macOS 10.11
      env: CONFIGURATION=Release
    - os: osx
      osx_image: xcode8.2
      env: CONFIGURATION=Debug

before_install:
  # Install OpenSSL
  - if test "$TRAVIS_OS_NAME" == "osx"; then
      brew update;
      brew install openssl;
      ln -s /usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib /usr/local/lib/;
      ln -s /usr/local/opt/openssl/lib/libssl.1.0.0.dylib /usr/local/lib/;
      brew link --force openssl;
      export DOTNET_SDK_URL="https://go.microsoft.com/fwlink/?LinkID=827533";
    else
      export DOTNET_SDK_URL="https://go.microsoft.com/fwlink/?LinkID=827536";
    fi

  - export DOTNET_INSTALL_DIR="$PWD/.dotnetcli"

  # Install .NET CLI
  - mkdir $DOTNET_INSTALL_DIR
  - curl -L $DOTNET_SDK_URL -o dotnet_package
  - tar -xvzf dotnet_package -C $DOTNET_INSTALL_DIR

  # Add dotnet to PATH
  - export PATH="$DOTNET_INSTALL_DIR:$PATH"

install:
  # Display dotnet version info
  - which dotnet;
    if [ $? -eq 0 ]; then
      echo "Using dotnet:";
      dotnet --info;
    else
      echo "dotnet.exe not found"
      exit 1;
    fi

  # [WORKAROUND]
  #
  # SYNOPSIS:
  #
  # dotnet-cli has introduced a bug with .NET Core RTM (wasn't there till RC2);
  # that is, the dotnet-run command ignores --framework option and therefore
  # demands mono PCL reference assemblies to be present on Unix systems, even
  # though when we intend to build for netcoreapp or netstandard TxM.
  #
  # See: https://github.com/dotnet/cli/issues/3658
  #
  # The workaround is to rewrite the JSON without net451 framework node in the
  # runnable (or testable) project's JSON file for CI. This work around must be
  # applied before executing dotnet-restore command.
  #
  # Written in JavaScript to be executable with node.js
  # (JavaScript being the most native langauge for JSON processing)
  #
  # Travis CI job when running under different langauge provides nvm (the node.js version manager)
  # but not node.js itself. So we first run:
  #
  # > $HOME/.nvm/nvm.sh
  #
  # then install stable node
  #
  # > nvm install stable && nvm use stable
  #
  # now, we have node.js in PATH. We will run the following program in evaluation
  # mode as one-liner:
  #
  # ```javascript
  # // the file to manipulate
  # jsonPath = './test/dotnet-test-nunit.test.runner/project.json';
  #
  # // read and parse JSON as object (aka CommonJS magic)
  # data = require(jsonPath);
  #
  # // FileSystem API handle
  # fs = require('fs');
  #
  # // delete framework 451 key from the object
  # delete data.frameworks.net451;
  #
  # // write back to file
  # fs.writeFileSync(jsonPath, JSON.stringify(data, null, 2));
  # ```
  # Now the actual one-liner (compressed) version:
  #
  - if test "$TRAVIS_OS_NAME" == "linux"; then
      nvm install stable && nvm use stable;
    fi
  - node -e "jsonPath='./src/DeveMazeGenerator/project.json';data=require(jsonPath);fs=require('fs');delete data.frameworks.net451;fs.writeFileSync(jsonPath, JSON.stringify(data, null, 2))"

  # Restore dependencies
  - dotnet restore src
  - dotnet restore test
  - dotnet restore ImageSharp/src

  # Build projects
  - dotnet build -c $CONFIGURATION  ./src/**/project.json
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CONFIGURATION" == "Release" ]]; then
      mkdir ./Scripts/Docker/DeveMazeGeneratorCoreWebPublish;
      dotnet publish -c $CONFIGURATION ./src/DeveMazeGeneratorWeb/project.json --output ./Scripts/Docker/DeveMazeGeneratorCoreWebPublish;
      cd Scripts;
      cd Docker;
      docker build -t devedse/devemazegeneratorcore .;
      cd ..;
      cd ..;
      docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD";
      docker push devedse/devemazegeneratorcore:latest;
    fi
script:
  # Run tests
  - dotnet test -c $CONFIGURATION ./test/DeveMazeGenerator.Tests

notifications:
  email: false